# -*- coding: utf-8 -*-
"""LagrangePLot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mq3n1TsIRURWYxC9M31uDoL6nTVggEeB

IMPORT LIBRARIES
"""

import numpy as np
import matplotlib.pyplot as plt
import sys
from scipy import interpolate

"""PLOTTING THE LAGRANGE GRAPH"""

def plot(f, points):
	#Using 1000 new values of x
	x = np.linspace(-1, 1,1000)
  #calling function with the new values
	y = list(map(f, x))
	#y=f(x)
	print(y)
	x_list = []
	y_list = []
	for x_p, y_p in points:
		x_list.append(x_p)
		y_list.append(y_p)
  #PLOTTING THE FUNCTION VALUE
	plt.plot( x, y)
	#PLOTTING THE POINTS
	plt.scatter(x_list, y_list, c="blue")

	plt.show()

"""LAGRANGE FUNCTION"""

def lagrange(points):
	#CREATING THE LARGANGE FUNCTION
	#P(x) represents the complete function
	def P(x):
		total = 0
		n = len(points)
	# get individual x,y values from all point values
		for i in range(n):
			xi, yi = points[i]
			
			def g(i, n):
				#GETTING THE INDIVIDUAL VALUES
				tot_mul = 1
				for j in range(n):
					if i == j:
						continue
					xj, yj = points[j]
					tot_mul *= (x - xj) / float(xi - xj)
					
				return tot_mul 
      #ADDING UP THE DIFFERENT PARTS OF THE FUNCTION
			total += yi * g(i, n)
		return total
		# calls the inner P function
	return P

"""LINEAR INTERPOLATION USING SCIPY"""

def linear(x,y):
  # F Function for linear interpolation
  f = interpolate.interp1d(x, y,kind = 'linear')
  xnew = np.linspace(-1, 1,10)
  plt.plot(xnew, f(xnew))
  plt.scatter(x,y, c ="blue")
  plt.title("Linear Interpolation") 
  plt.show()

"""SPLINE INTERPOLATION USING SCIPY"""

def spline(x,y):
  f = interpolate.interp1d(x, y, kind='cubic')
  xnew = np.linspace(-1, 1,100)
  plt.plot(xnew, f(xnew))
  plt.scatter(x,y, c ="blue")
  plt.title("Spline Interpolation") 
  plt.show()

"""Main to be called"""

def main():
	# INITIAL VALUES IN USE
  xi=np.linspace(-1,1,10)
  yi=[3,2,2,1,0,-3,-4,1,2,4]
	#CREATION A 2 value list to store ad point (x,y)
  points = []
  for i in range(0,len(yi)):
    points.append((xi[i],yi[i]))
	#Calling the created Lagrange function
  P = lagrange(points)
	#Calling the Linear Interpolation Function
  linear(xi,yi)
	#Calling the Spline Interpolation Function
  spline(xi,yi)
	#Plot Lagrange Function
  plot(P, points)

if __name__ == "__main__":
	main()